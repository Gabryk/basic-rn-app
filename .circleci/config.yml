version: 2

anchors:
  job: &base_deploy
    docker:
      - image: circleci/android:api-28-node8-alpha
    working_directory: ~/basic-rn-app/android
    steps:
      - &d_step1
          checkout:
            path: ~/basic-rn-app
      - &d_step2
          attach_workspace:
            at: ~/basic-rn-app
      - &d_step3
          restore_cache:
            key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - &d_step4
          run: |
            gem install bundler -v 2.0.2
            bundle install
            echo "export APP_VERSION=$CIRCLE_TAG" >> $BASH_ENV
            echo "export APP_BUIL_NUMBER=$CIRCLE_BUILD_NUM" >> $BASH_ENV
      - &d_step5
          save_cache:
            key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
            paths:
              - vendor/bundle

  job-github-release: &base_ghr
    docker:
      - image: circleci/golang:1.13.0
    steps:
      - &g_step1
          run:
            name: "Download Artifacts"
            command: |
              mkdir artifacts
              export USERNAME=$CIRCLE_PROJECT_USERNAME
              export BUILD_NUMBER=$CIRCLE_PREVIOUS_BUILD_NUM
              export PROJECT=$CIRCLE_PROJECT_REPONAME
              curl https://circleci.com/api/v1.1/project/github/$USERNAME/$PROJECT/$BUILD_NUMBER/artifacts?circle-token=$CIRCLE_TOKEN | grep -o 'https://[^"]*' | sed -e "s/$/?circle-token=$CIRCLE_TOKEN/" | wget -P artifacts/ -v -i -
              rename -v -n 's/.circle-token=\Q$ENV{CIRCLE_TOKEN}\E//' artifacts/*
      - &g_step2
          run:
            name: "Preparing GitHub Release"
            command: |
              go get -u github.com/tcnksm/ghr
              echo "export APP_VERSION=$CIRCLE_TAG" >> $BASH_ENV
              echo "export APP_BUIL_NUMBER=$CIRCLE_PREVIOUS_BUILD_NUM" >> $BASH_ENV

  filters: &only_version
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/

jobs:
  node:
    working_directory: ~/basic-rn-app
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
      - run: yarn install
      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
      # - run:
      #     name: jest tests
      #     command: |
      #       mkdir -p test-results/jest
      #       yarn run test
      #     environment:
      #       JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      - persist_to_workspace:
          root: ~/basic-rn-app
          paths:
            - node_modules

      # - store_test_results:
      #     path: test-results

      # - store_artifacts:
      #     path: test-results

  android-alpha:
    <<: *base_deploy
    steps+:
      - &run
          run:
            name: fastlane android alpha
            command: |
              bundle exec fastlane alpha
      - &store_artifacts
          store_artifacts:
            path: app/build/outputs/apk/release/
    steps:
      [*d_step1,*d_step2,*d_step3,*d_step4,*d_step5,*run,*store_artifacts]
  android-beta:
    <<: *base_deploy
    steps+:
      - &run
        run:
          name: fastlane android beta
          command: |
            bundle exec fastlane beta
    steps:
      [*d_step1,*d_step2,*d_step3,*d_step4,*d_step5,*run]
  android-dist:
    <<: *base_deploy
    steps+:
      - &run
        run:
          name: Fastlane Android Distribution
          command: |
            bundle exec fastlane dist
    steps:
      [*d_step1,*d_step2,*d_step3,*d_step4,*d_step5,*run]

  github-release:
    <<: *base_ghr
    steps+:
      - &run
        run:
          name: "Publish Release on GitHub"
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -replace -draft ${APP_VERSION} artifacts/
    steps:
      [*g_step1,*g_step2,*run]

  github-prerelease:
    <<: *base_ghr
    steps+:
      - &run
          run:
            name: "Publish Pre-Release on GitHub"
            command: |
              ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -replace -draft -prerelease ${APP_VERSION} ./artifacts/
    steps:
      [*g_step1,*g_step2,*run]

workflows:
  version: 2
  node-android-ios:
    jobs:
      - node:
          <<: *only_version

      - android-alpha:
          <<: *only_version
          requires:
            - node

      - android-beta-hold:
          <<: *only_version
          type: approval
          requires: # Run after the Alpha build has succeeded
            - android-alpha
      - android-dist-hold:
          <<: *only_version
          type: approval
          requires: # Run only if Beta was approved
            - android-alpha

      # Deliver Beta only if Beta was approved
      - android-beta:
          <<: *only_version
          requires:
            - android-beta-hold
      # Deliver Distribution only if Distribution was approved 
      - android-dist:
          <<: *only_version
          requires:
            - android-dist-hold

      - github-prerelease:
          <<: *only_version
          requires:
            - android-beta-hold
      - github-release:
          <<: *only_version
          requires:
            - android-dist-hold