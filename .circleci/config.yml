version: 2

anchors:
  job: &base_deploy
    docker:
      - image: circleci/android:api-28-node8-alpha
    working_directory: ~/basic-rn-app/android

  job-github-release: &base_ghr
    docker:
      - image: circleci/golang:1.8
    steps: &ghr_steps
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Preparing GitHub Release"
          command: |
            go get github.com/tcnksm/ghr
            export APP_VERSION=$CIRCLE_TAG
            export APP_BUIL_NUMBER=$CIRCLE_BUILD_NUM

  steps: &base_steps
    - checkout:
      path: ~/basic-rn-app
    - attach_workspace:
      at: ~/basic-rn-app
    - restore_cache:
      key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
    - run: bundle install
    - save_cache:
      key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      paths:
        - vendor/bundle

  filters: &only_version
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/

jobs:
  node:
    working_directory: ~/basic-rn-app
    docker:
      - image: circleci/node:8
    steps:
      - checkout

      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      # - run:
      #     name: jest tests
      #     command: |
      #       mkdir -p test-results/jest
      #       yarn run test
      #     environment:
      #       JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      # - persist_to_workspace:
      #     root: ~/basic-rn-app
      #     paths:
      #       - node_modules

      # - store_test_results:
      #     path: test-results

      # - store_artifacts:
      #     path: test-results

  android-alpha:
    <<: *base_deploy
    steps:
      - *base_steps
      - run:
          name: fastlane android alpha
          command: |
            bundle exec fastlane alpha
      - store_artifacts:
          path: android/app/build/outputs/apk/release/app-release.apk
  
  android-beta:
    <<: *base_deploy
    steps:
      - *base_steps
      - run:
          name: fastlane android beta
          command: |
            bundle exec fastlane beta

  ios-beta:
    macos:
      xcode: "10.1.0"
    working_directory: ~/basic-rn-app
    # use a --login shell so our "set Ruby version" command gets picked up for later steps
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - run:
          name: set Ruby version
          command:  echo "ruby-2.4" > ~/.ruby-version
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
      # not using a workspace here as Node and Yarn versions
      # differ between our macOS executor image and the Docker containers above
      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - restore_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}

      - run:
          command: bundle install
          working_directory: ios

      - save_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          command: bundle exec fastlane test
          working_directory: ios

      - run:
          name: set up test results
          working_directory: ios
          when: always
          command: |
            mkdir -p test-results/fastlane test-results/xcode
            mv fastlane/report.xml test-results/fastlane
            mv fastlane/test_output/report.junit test-results/xcode/junit.xml
      - store_test_results:
          path: ios/test-results

      - store_artifacts:
          path: ios/test-results
  
  github-release:
    <<: *base_ghr
    steps:
      - *ghr_steps
      - run:
          name: "Publish Release on GitHub"
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -replace -draft ${APP_VERSION} ./artifacts/
workflows:
  version: 2
  node-android-ios:
    jobs:
      - node:
          <<: *only_version
      - android-hold:
          type: approval

      - android-alpha:
          <<: *only_version
          requires:
            - node
      - android-beta:
          <<: *only_version
          requires:
            - android-hold

      - github-release:
          requires:
            - android-hold
      # - ios:
      #     requires:
      #       - node